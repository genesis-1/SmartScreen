// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;
using SmartScreen.Data;

namespace SmartScreen.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190824145737_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartScreen.Models.BnrCustomer", b =>
                {
                    b.Property<string>("CustomerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cust_no");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnName("Cust_name");

                    b.Property<int>("EconomicSubSectorCodeISICId")
                        .HasColumnName(" sub_sector_code_isic");

                    b.Property<int>("EconomicSubSectorCodeId")
                        .HasColumnName("sub_sector_code");

                    b.Property<string>("EducationCode")
                        .IsRequired()
                        .HasColumnName("education");

                    b.Property<string>("NaiscCode")
                        .IsRequired()
                        .HasColumnName("naics_code");

                    b.Property<string>("ResidenceTypeCode")
                        .IsRequired()
                        .HasColumnName("residence_type");

                    b.Property<string>("VillageList")
                        .IsRequired()
                        .HasColumnName("village");

                    b.Property<string>("VisionSBU")
                        .IsRequired()
                        .HasColumnName("vision_sbu");

                    b.HasKey("CustomerNumber");

                    b.HasIndex("EconomicSubSectorCodeISICId");

                    b.HasIndex("EconomicSubSectorCodeId");

                    b.HasIndex("EducationCode");

                    b.HasIndex("NaiscCode");

                    b.HasIndex("ResidenceTypeCode");

                    b.HasIndex("VillageList");

                    b.HasIndex("VisionSBU");

                    b.ToTable("BNR_CUSTOMER");
                });

            modelBuilder.Entity("SmartScreen.Models.CustomerAccount", b =>
                {
                    b.Property<int>("CustomerAccountNumber")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.HasKey("CustomerAccountNumber");

                    b.ToTable("CustomerAccounts");
                });

            modelBuilder.Entity("SmartScreen.Models.EconomicSubSectorCode", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("economic_sub_sector_bnr");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("economic_sub_sector_bnr_desc");

                    b.HasKey("Code");

                    b.ToTable("ECONOMIC_SUB_SECTOR_CODE");
                });

            modelBuilder.Entity("SmartScreen.Models.EconomicSubSectorCodeISIC", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("economic_sub_sector_code_isic");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("economic_sub_sector_code_desc");

                    b.HasKey("Code");

                    b.ToTable("ECONOMIC_SUB_SECTOR_CODE_ISIC");
                });

            modelBuilder.Entity("SmartScreen.Models.Education", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code_edu");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description_edu");

                    b.HasKey("Code");

                    b.ToTable("EDUCATION");
                });

            modelBuilder.Entity("SmartScreen.Models.NaicsCode", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("naics_codes");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("naics_description");

                    b.HasKey("Code");

                    b.ToTable("NAICS_CODE");
                });

            modelBuilder.Entity("SmartScreen.Models.RelatedParty", b =>
                {
                    b.Property<string>("RelatedPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("related_party");

                    b.Property<string>("RelatedPartyDescription")
                        .IsRequired()
                        .HasColumnName("related_party_description");

                    b.HasKey("RelatedPart");

                    b.ToTable("RELATED_PARTY");
                });

            modelBuilder.Entity("SmartScreen.Models.ResidenceType", b =>
                {
                    b.Property<string>("Code")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.HasKey("Code");

                    b.ToTable("RESIDENCE_TYPE");
                });

            modelBuilder.Entity("SmartScreen.Models.VillageList", b =>
                {
                    b.Property<string>("Villagelist")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("village_list");

                    b.Property<string>("CellList")
                        .IsRequired()
                        .HasColumnName("cell_list");

                    b.Property<string>("CellListDescription")
                        .IsRequired()
                        .HasColumnName("cell_list_description");

                    b.Property<string>("DistrictList")
                        .IsRequired()
                        .HasColumnName("district_list");

                    b.Property<string>("DistrictListDescription")
                        .IsRequired()
                        .HasColumnName("district_list_description");

                    b.Property<string>("ProvinceList")
                        .IsRequired()
                        .HasColumnName("province_list");

                    b.Property<string>("ProvinceListDescription")
                        .IsRequired()
                        .HasColumnName("province_list_description");

                    b.Property<string>("SectorList")
                        .IsRequired()
                        .HasColumnName("sector_list");

                    b.Property<string>("SectorListDescription")
                        .IsRequired()
                        .HasColumnName("sector_list_description");

                    b.Property<string>("VillagelistDescription")
                        .IsRequired()
                        .HasColumnName("vilage_list_description");

                    b.HasKey("Villagelist");

                    b.ToTable("VILLAGE_LIST");
                });

            modelBuilder.Entity("SmartScreen.Models.VisionSBU", b =>
                {
                    b.Property<string>("VisionSbu")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("vision_sbu");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnName("definition");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("description");

                    b.HasKey("VisionSbu");

                    b.ToTable("VISION_SBU");
                });

            modelBuilder.Entity("SmartScreen.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartScreen.Models.BnrCustomer", b =>
                {
                    b.HasOne("SmartScreen.Models.EconomicSubSectorCodeISIC", "EconomicSubSectorCodeISIC")
                        .WithMany()
                        .HasForeignKey("EconomicSubSectorCodeISICId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.EconomicSubSectorCode", "EconomicSubSectorCode")
                        .WithMany()
                        .HasForeignKey("EconomicSubSectorCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.Education", "Education")
                        .WithMany()
                        .HasForeignKey("EducationCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.NaicsCode", "NaicsCode")
                        .WithMany()
                        .HasForeignKey("NaiscCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.ResidenceType", "Residence")
                        .WithMany()
                        .HasForeignKey("ResidenceTypeCode")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.VillageList", "Village")
                        .WithMany()
                        .HasForeignKey("VillageList")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartScreen.Models.VisionSBU", "Vision")
                        .WithMany()
                        .HasForeignKey("VisionSBU")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
